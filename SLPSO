function [Gbest, Gbest_val] = SLPSO(func_num, fhd, dim, pop, MaxFes, VRmin, VRmax, varargin)


    fbias = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, ...
             1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, ...
             2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900, 3000];

    group_ps = 3;     
    Rmin = 0.2;
    Rmax = 0.5;
    flag = 0;
    sigmax = 4.5;
    sigmin = 0.05;
    sig = 1;
    gap1 = 5;


    c1_array = 2.5 - (1:MaxFes)*2/MaxFes;
    c2_array = 0.5 + (1:MaxFes)*2/MaxFes;

    FEs = 0;
    Xmin = VRmin;
    Xmax = VRmax;


    lu = [Xmin*ones(1,dim); Xmax*ones(1,dim)];
    mv = 0.1*(lu(2,:) - lu(1,:));
    Vmin = repmat(-mv, pop, 1);
    Vmax = -Vmin;
    vel = Vmin + 2 .* Vmax .* rand(pop, dim);


    pos = VRmin + (VRmax - VRmin).*rand(pop, dim);


    fitness = (feval(fhd, pos', varargin{:}) - fbias(func_num))';
    FEs = FEs + pop;


    Pbest = pos;
    Pbest_val = fitness;
    [val, indfitness] = sort(fitness,'ascend');
    Gbest_val = val(1);
    Gbest = pos(indfitness(1),:);


    while FEs <= MaxFes

        current_c1 = c1_array(min(FEs,MaxFes));
        current_c2 = c2_array(min(FEs,MaxFes));
        pm = 0.1 - 0.09* FEs / MaxFes;
        % pm=0.1;

        if max(fitness)==min(fitness)
            fitness_norm = zeros(size(fitness));
        else
            fitness_norm = (fitness - min(fitness)) / (max(fitness)-min(fitness));
        end
        [~, index] = sort(fitness_norm,'ascend');

        % 动态调整探索子群大小 K
        K = ceil(pop*Rmax - (pop*Rmax-pop*Rmin)*(FEs/MaxFes));
        K = max(1, min(K,pop));
        while mod(K, group_ps) ~= 0
            K = K + 1; K = max(1,min(K,pop));
        end

        % 排序
        Pbest_sorted = Pbest(index,:);
        pos_sorted = pos(index,:);
        Pbest_val_sorted = Pbest_val(index,:);
        vel_sorted = vel(index,:);


        group_num = K / group_ps;
        group_id = zeros(group_num, group_ps);
        pos_group = zeros(1,pop);
        gbest = zeros(group_num, dim);
        gbestval = zeros(group_num, 1);

        for h = 1:group_num
            group_id(h,:) = ((h-1)*group_ps+1):h*group_ps;
            pos_group(group_id(h,:)) = h;
            [gbestval(h), gbestid] = min(Pbest_val_sorted(group_id(h,:)));
            gbest(h,:) = Pbest_sorted(group_id(h, gbestid), :);
        end

  
        D_threshold = 0.001*sqrt(sum((Xmax-Xmin).^2));
        reorganize_flag = false;

        for h = 1:group_num
            subgroup_idx = group_id(h,:);
            subgroup_pos = Pbest_sorted(subgroup_idx,:);
            lbest_pos = gbest(h,:);
            distances = sqrt(sum((subgroup_pos - lbest_pos).^2, 2));
            D_h = mean(distances);
            if D_h < D_threshold
                reorganize_flag = true;
                break; 
            end
        end

        if reorganize_flag
            rc = randperm(group_num*group_ps);
            for h = 1:group_num
                group_id(h,:) = rc(((h-1)*group_ps+1):h*group_ps);
                pos_group(group_id(h,:)) = h;
                [gbestval(h), gbestid] = min(Pbest_val_sorted(group_id(h,:)));
                gbest(h,:) = Pbest_sorted(group_id(h, gbestid), :);
            end
        end
        % ---------------------------------------------------------------


        wx = zeros(1,pop);
        for kk = 1:pop
            wx(kk) = (0.756*exp(-FEs/MaxFes)+0.144)*(1/(1+0.1*exp(2.6*fitness_norm(index(kk)))));
        end

        OO = zeros(1, dim);
        if K>0
            scorelite = fitness_norm(index(1:K));
            score = 1 - scorelite;
            for jj=1:K
                OO = OO + score(jj)/sum(score)*Pbest_sorted(jj,:);
            end
        end


        distances_pbest = sqrt(sum((Pbest_sorted - Gbest).^2, 2));
        if max(distances_pbest)==min(distances_pbest)
            normDG_pbest = zeros(pop,1);
        else
            normDG_pbest = (distances_pbest - min(distances_pbest)) / (max(distances_pbest) - min(distances_pbest) + eps);
        end

        alpha = 0.5*(1 + FEs/MaxFes);
        FDBscore = alpha*(1-fitness_norm(index)) + (1-alpha)*normDG_pbest;
        [~, idx] = max(FDBscore);
        FDBbest_current = Pbest_sorted(idx,:);

        pf = 0.5*(1 - FEs/MaxFes);

   
        new_vel = vel_sorted;
        new_pos = pos_sorted;

        for i = 1:pop
            if i <= K
                new_vel(i,:) = wx(i)*vel_sorted(i,:) + ...
                               current_c1*rand(1,dim).*(Pbest_sorted(i,:) - pos_sorted(i,:)) + ...
                               current_c2*rand(1,dim).*(gbest(pos_group(i),:) - pos_sorted(i,:));
                new_vel(i,:) = min(max(new_vel(i,:), Vmin(i,:)), Vmax(i,:));
                new_pos(i,:) = pos_sorted(i,:) + new_vel(i,:);
                new_pos(i,:) = non_uniform_mutation_single(new_pos(i,:), pm, FEs, MaxFes, Xmin, Xmax);
            else
                if rand() > pf
                    guide = Gbest;
                else
                    guide = FDBbest_current;
                end
                % guide=Gbest;
                new_vel(i,:) = wx(i)*vel_sorted(i,:) + ...
                               current_c1*rand(1,dim).*(OO - pos_sorted(i,:)) + ...
                               current_c2*rand(1,dim).*(guide - pos_sorted(i,:));
                new_vel(i,:) = min(max(new_vel(i,:), Vmin(i,:)), Vmax(i,:));
                new_pos(i,:) = pos_sorted(i,:) + new_vel(i,:);
            end
        end

  
        if rand>0.5
            new_pos = max(min(new_pos, Xmax), Xmin);
        else
            out_of_bounds_min = new_pos < Xmin;
            out_of_bounds_max = new_pos > Xmax;
            new_pos = new_pos .* ~(out_of_bounds_min|out_of_bounds_max) + ...
                      (Xmin + 0.2*(Xmax-Xmin).*rand(pop,dim)).*out_of_bounds_min + ...
                      (Xmax - 0.2*(Xmax-Xmin).*rand(pop,dim)).*out_of_bounds_max;
        end


        new_fitness = (feval(fhd, new_pos', varargin{:}) - fbias(func_num))';
        FEs = FEs + pop;


        if FEs >= 0.6*MaxFes && FEs+1<=MaxFes
            [~, worst_idx] = max(new_fitness);
            p = randi(pop); k = randi(pop);
            while k==p, k=randi(pop); end
            rand_factor = rand();
            Nbest = Gbest + rand_factor*(Pbest_sorted(p,:) - Pbest_sorted(k,:));
            Nbest = max(min(Nbest,Xmax), Xmin);
            cp = (feval(fhd, Nbest', varargin{:}) - fbias(func_num))';
            if cp < new_fitness(worst_idx)
                new_pos(worst_idx,:) = Nbest;
                new_fitness(worst_idx) = cp;
                FEs = FEs + 1;
            end
        end

      
        improved = new_fitness < Pbest_val_sorted;
        Pbest_val_sorted(improved) = new_fitness(improved);
        Pbest_sorted(improved,:) = new_pos(improved,:);

        Pbest = Pbest_sorted;
        Pbest_val = Pbest_val_sorted;
        pos = new_pos;
        vel = new_vel;
        fitness = new_fitness;

        [min_val, min_idx] = min(Pbest_val);
        if min_val < Gbest_val
            Gbest_val = min_val;
            Gbest = Pbest(min_idx,:);
            flag = 0;
        else
            flag = flag + 1;
        end

        if flag >= gap1 && FEs+1<=MaxFes
            pt = Gbest;
            d1 = randi(dim);
            randdata = 2*rand-1;
            pt(d1) = pt(d1) + sign(randdata)*(Xmax-Xmin)*normrnd(0,sig^2);
            pt = max(min(pt,Xmax),Xmin);
            cv = (feval(fhd, pt', varargin{:}) - fbias(func_num))';
            if cv < Gbest_val
                Gbest = pt;
                Gbest_val = cv;
                flag = 0;
                Pbest(min_idx,:) = pt;
                Pbest_val(min_idx) = cv;
            end
            FEs = FEs + 1;
        end

      
        sig = sigmax - (sigmax-sigmin)*(FEs/MaxFes);
    end
end


function [mutated] = non_uniform_mutation_single(particle, pm, t, T, Xmin, Xmax)
    b = 4;
    dim = length(particle);
    mutated = particle;
    for j = 1:dim
        if rand < pm
            if rand < 0.5
                mutated(j) = particle(j) + rand*(Xmax - particle(j))*(1 - t/T)^b;
            else
                mutated(j) = particle(j) - rand*(particle(j) - Xmin)*(1 - t/T)^b;
            end
        end
    end
end
